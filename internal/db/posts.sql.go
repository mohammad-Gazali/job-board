// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package db

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (title)
VALUES ($1)
`

func (q *Queries) CreatePost(ctx context.Context, title string) error {
	_, err := q.db.Exec(ctx, createPost, title)
	return err
}

const getAllPosts = `-- name: GetAllPosts :many
SELECT id, title, created_at FROM posts
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.Query(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(&i.ID, &i.Title, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostById = `-- name: GetPostById :one
SELECT id, title, created_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostById(ctx context.Context, id int32) (Post, error) {
	row := q.db.QueryRow(ctx, getPostById, id)
	var i Post
	err := row.Scan(&i.ID, &i.Title, &i.CreatedAt)
	return i, err
}
